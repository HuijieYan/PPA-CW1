acslToWitness
Running CPAchecker with default heap size (1200M). Specify a larger value with -heap if you have more RAM.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Language C detected and set for analysis (CPAMain.detectFrontendLanguageIfNecessary, INFO)

Using the following resource limits: CPU-time limit of 10s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker 2.1.1 / acslToWitness (OpenJDK 64-Bit Server VM 17.0.9) started (CPAchecker.run, INFO)

Parsing CFA from file(s) "/home/pom/CS-Work/Year-4/Practical-Programming-Analysis-COMP0174/Courseworks/Coursework_1/repos/XERXES/xerxes.c" (CPAchecker.parse, INFO)

No ACSL annotations in CFA, ACSLCPA is useless. (ACSLCPA:ACSLCPA.<init>, WARNING)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Stopping analysis ... (CPAchecker.runAlgorithm, INFO)

Verification result: TRUE. No property violation found by chosen configuration.
More details about the verification run can be found in the directory "./output".
Graphical representation included in the file "./output/Report.html".
bmcConcurrency
Running CPAchecker with default heap size (1200M). Specify a larger value with -heap if you have more RAM.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Language C detected and set for analysis (CPAMain.detectFrontendLanguageIfNecessary, INFO)

Using the following resource limits: CPU-time limit of 10s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker 2.1.1 / bmc-concurrency (OpenJDK 64-Bit Server VM 17.0.9) started (CPAchecker.run, INFO)

Parsing CFA from file(s) "/home/pom/CS-Work/Year-4/Practical-Programming-Analysis-COMP0174/Courseworks/Coursework_1/repos/XERXES/xerxes.c" (CPAchecker.parse, INFO)

Using predicate analysis with MathSAT5 version 5.6.6 (218275631c24) (Apr 23 2021 08:35:29, gmp 6.1.2, gcc 7.5.0, 64-bit, reentrant). (PredicateCPA:PredicateCPA.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Stopping analysis ... (CPAchecker.runAlgorithm, INFO)

Verification result: TRUE. No property violation found by chosen configuration.
More details about the verification run can be found in the directory "./output".
Graphical representation included in the file "./output/Report.html".
bmcIncrementalABEl
Running CPAchecker with default heap size (1200M). Specify a larger value with -heap if you have more RAM.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Language C detected and set for analysis (CPAMain.detectFrontendLanguageIfNecessary, INFO)

Using the following resource limits: CPU-time limit of 10s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker 2.1.1 / bmc-incremental-ABEl (OpenJDK 64-Bit Server VM 17.0.9) started (CPAchecker.run, INFO)

Parsing CFA from file(s) "/home/pom/CS-Work/Year-4/Practical-Programming-Analysis-COMP0174/Courseworks/Coursework_1/repos/XERXES/xerxes.c" (CPAchecker.parse, INFO)

Using predicate analysis with MathSAT5 version 5.6.6 (218275631c24) (Apr 23 2021 08:35:29, gmp 6.1.2, gcc 7.5.0, 64-bit, reentrant) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Stopping analysis ... (CPAchecker.runAlgorithm, INFO)

Verification result: TRUE. No property violation found by chosen configuration.
More details about the verification run can be found in the directory "./output".
Graphical representation included in the file "./output/Report.html".
bmcIncremental
Running CPAchecker with default heap size (1200M). Specify a larger value with -heap if you have more RAM.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Language C detected and set for analysis (CPAMain.detectFrontendLanguageIfNecessary, INFO)

Using the following resource limits: CPU-time limit of 10s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker 2.1.1 / bmc-incremental (OpenJDK 64-Bit Server VM 17.0.9) started (CPAchecker.run, INFO)

Parsing CFA from file(s) "/home/pom/CS-Work/Year-4/Practical-Programming-Analysis-COMP0174/Courseworks/Coursework_1/repos/XERXES/xerxes.c" (CPAchecker.parse, INFO)

Using predicate analysis with MathSAT5 version 5.6.6 (218275631c24) (Apr 23 2021 08:35:29, gmp 6.1.2, gcc 7.5.0, 64-bit, reentrant). (PredicateCPA:PredicateCPA.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Stopping analysis ... (CPAchecker.runAlgorithm, INFO)

Verification result: TRUE. No property violation found by chosen configuration.
More details about the verification run can be found in the directory "./output".
Graphical representation included in the file "./output/Report.html".
bmcInduction
Running CPAchecker with default heap size (1200M). Specify a larger value with -heap if you have more RAM.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Language C detected and set for analysis (CPAMain.detectFrontendLanguageIfNecessary, INFO)

Using the following resource limits: CPU-time limit of 10s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker 2.1.1 / bmc-induction (OpenJDK 64-Bit Server VM 17.0.9) started (CPAchecker.run, INFO)

Parsing CFA from file(s) "/home/pom/CS-Work/Year-4/Practical-Programming-Analysis-COMP0174/Courseworks/Coursework_1/repos/XERXES/xerxes.c" (CPAchecker.parse, INFO)

Using the following resource limits: CPU-time limit of 10s (Parallel analysis 1:ResourceLimitChecker.fromConfiguration, INFO)

Using predicate analysis with MathSAT5 version 5.6.6 (218275631c24) (Apr 23 2021 08:35:29, gmp 6.1.2, gcc 7.5.0, 64-bit, reentrant). (Parallel analysis 1:PredicateCPA:PredicateCPA.<init>, INFO)

Using predicate analysis with MathSAT5 version 5.6.6 (218275631c24) (Apr 23 2021 08:35:29, gmp 6.1.2, gcc 7.5.0, 64-bit, reentrant). (Parallel analysis 1:InductionStepCase:PredicateCPA:PredicateCPA.<init>, INFO)

Using the following resource limits: CPU-time limit of 10s (Parallel analysis 2:ResourceLimitChecker.fromConfiguration, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

./config/components/kInduction+Invariants/../kInduction/kInduction.properties finished successfully. (ParallelAlgorithm.handleFutureResults, INFO)

Analysis was terminated (Parallel analysis 2:ParallelAlgorithm.runParallelAnalysis, INFO)

Stopping analysis ... (CPAchecker.runAlgorithm, INFO)

Verification result: TRUE. No property violation found by chosen configuration.
More details about the verification run can be found in the directory "./output".
Graphical representation included in the file "./output/Report.html".
bmcInterpolation
Running CPAchecker with default heap size (1200M). Specify a larger value with -heap if you have more RAM.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Language C detected and set for analysis (CPAMain.detectFrontendLanguageIfNecessary, INFO)

Using the following resource limits: CPU-time limit of 10s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker 2.1.1 / bmc-interpolation (OpenJDK 64-Bit Server VM 17.0.9) started (CPAchecker.run, INFO)

Parsing CFA from file(s) "/home/pom/CS-Work/Year-4/Practical-Programming-Analysis-COMP0174/Courseworks/Coursework_1/repos/XERXES/xerxes.c" (CPAchecker.parse, INFO)

Using predicate analysis with MathSAT5 version 5.6.6 (218275631c24) (Apr 23 2021 08:35:29, gmp 6.1.2, gcc 7.5.0, 64-bit, reentrant) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Stopping analysis ... (CPAchecker.runAlgorithm, INFO)

Verification result: TRUE. No property violation found by chosen configuration.
More details about the verification run can be found in the directory "./output".
Graphical representation included in the file "./output/Report.html".
bmcInterpolationSequence
Running CPAchecker with default heap size (1200M). Specify a larger value with -heap if you have more RAM.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Language C detected and set for analysis (CPAMain.detectFrontendLanguageIfNecessary, INFO)

Using the following resource limits: CPU-time limit of 10s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker 2.1.1 / bmc-interpolationSequence (OpenJDK 64-Bit Server VM 17.0.9) started (CPAchecker.run, INFO)

Parsing CFA from file(s) "/home/pom/CS-Work/Year-4/Practical-Programming-Analysis-COMP0174/Courseworks/Coursework_1/repos/XERXES/xerxes.c" (CPAchecker.parse, INFO)

Using predicate analysis with MathSAT5 version 5.6.6 (218275631c24) (Apr 23 2021 08:35:29, gmp 6.1.2, gcc 7.5.0, 64-bit, reentrant) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Stopping analysis ... (CPAchecker.runAlgorithm, INFO)

Verification result: TRUE. No property violation found by chosen configuration.
More details about the verification run can be found in the directory "./output".
Graphical representation included in the file "./output/Report.html".
bmcInvgen
Running CPAchecker with default heap size (1200M). Specify a larger value with -heap if you have more RAM.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Language C detected and set for analysis (CPAMain.detectFrontendLanguageIfNecessary, INFO)

Using the following resource limits: CPU-time limit of 10s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker 2.1.1 / bmc-invgen (OpenJDK 64-Bit Server VM 17.0.9) started (CPAchecker.run, INFO)

Parsing CFA from file(s) "/home/pom/CS-Work/Year-4/Practical-Programming-Analysis-COMP0174/Courseworks/Coursework_1/repos/XERXES/xerxes.c" (CPAchecker.parse, INFO)

Using predicate analysis with MathSAT5 version 5.6.6 (218275631c24) (Apr 23 2021 08:35:29, gmp 6.1.2, gcc 7.5.0, 64-bit, reentrant). (PredicateCPA:PredicateCPA.<init>, INFO)

Using predicate analysis with MathSAT5 version 5.6.6 (218275631c24) (Apr 23 2021 08:35:29, gmp 6.1.2, gcc 7.5.0, 64-bit, reentrant). (InductionStepCase:PredicateCPA:PredicateCPA.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Stopping analysis ... (CPAchecker.runAlgorithm, INFO)

Verification result: TRUE. No property violation found by chosen configuration.
More details about the verification run can be found in the directory "./output".
Graphical representation included in the file "./output/Report.html".
bmcPathcondition
Running CPAchecker with default heap size (1200M). Specify a larger value with -heap if you have more RAM.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Language C detected and set for analysis (CPAMain.detectFrontendLanguageIfNecessary, INFO)

Using the following resource limits: CPU-time limit of 10s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker 2.1.1 / bmc-pathcondition (OpenJDK 64-Bit Server VM 17.0.9) started (CPAchecker.run, INFO)

Parsing CFA from file(s) "/home/pom/CS-Work/Year-4/Practical-Programming-Analysis-COMP0174/Courseworks/Coursework_1/repos/XERXES/xerxes.c" (CPAchecker.parse, INFO)

Using predicate analysis with MathSAT5 version 5.6.6 (218275631c24) (Apr 23 2021 08:35:29, gmp 6.1.2, gcc 7.5.0, 64-bit, reentrant). (PredicateCPA:PredicateCPA.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Stopping analysis ... (CPAchecker.runAlgorithm, INFO)

Verification result: TRUE. No property violation found by chosen configuration.
More details about the verification run can be found in the directory "./output".
Graphical representation included in the file "./output/Report.html".
bmc
Running CPAchecker with default heap size (1200M). Specify a larger value with -heap if you have more RAM.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Language C detected and set for analysis (CPAMain.detectFrontendLanguageIfNecessary, INFO)

Using the following resource limits: CPU-time limit of 10s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker 2.1.1 / bmc (OpenJDK 64-Bit Server VM 17.0.9) started (CPAchecker.run, INFO)

Parsing CFA from file(s) "/home/pom/CS-Work/Year-4/Practical-Programming-Analysis-COMP0174/Courseworks/Coursework_1/repos/XERXES/xerxes.c" (CPAchecker.parse, INFO)

Using predicate analysis with MathSAT5 version 5.6.6 (218275631c24) (Apr 23 2021 08:35:29, gmp 6.1.2, gcc 7.5.0, 64-bit, reentrant). (PredicateCPA:PredicateCPA.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Stopping analysis ... (CPAchecker.runAlgorithm, INFO)

Verification result: TRUE. No property violation found by chosen configuration.
More details about the verification run can be found in the directory "./output".
Graphical representation included in the file "./output/Report.html".
bmcSplittingCyclic
Running CPAchecker with default heap size (1200M). Specify a larger value with -heap if you have more RAM.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Language C detected and set for analysis (CPAMain.detectFrontendLanguageIfNecessary, INFO)

Using the following resource limits: CPU-time limit of 10s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker 2.1.1 / bmcSplitting-cyclic (OpenJDK 64-Bit Server VM 17.0.9) started (CPAchecker.run, INFO)

Parsing CFA from file(s) "/home/pom/CS-Work/Year-4/Practical-Programming-Analysis-COMP0174/Courseworks/Coursework_1/repos/XERXES/xerxes.c" (CPAchecker.parse, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Stopping analysis ... (CPAchecker.runAlgorithm, INFO)

Verification result: TRUE. No property violation found by chosen configuration.
More details about the verification run can be found in the directory "./output".
Graphical representation included in the file "./output/Report.html".
bmcSplittingIterations
Running CPAchecker with default heap size (1200M). Specify a larger value with -heap if you have more RAM.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Language C detected and set for analysis (CPAMain.detectFrontendLanguageIfNecessary, INFO)

Using the following resource limits: CPU-time limit of 10s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker 2.1.1 / bmcSplitting-iterations (OpenJDK 64-Bit Server VM 17.0.9) started (CPAchecker.run, INFO)

Parsing CFA from file(s) "/home/pom/CS-Work/Year-4/Practical-Programming-Analysis-COMP0174/Courseworks/Coursework_1/repos/XERXES/xerxes.c" (CPAchecker.parse, INFO)

Using predicate analysis with MathSAT5 version 5.6.6 (218275631c24) (Apr 23 2021 08:35:29, gmp 6.1.2, gcc 7.5.0, 64-bit, reentrant). (PredicateCPA:PredicateCPA.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Stopping analysis ... (CPAchecker.runAlgorithm, INFO)

Verification result: TRUE. No property violation found by chosen configuration.
More details about the verification run can be found in the directory "./output".
Graphical representation included in the file "./output/Report.html".
combinationsBdd+va
Running CPAchecker with default heap size (1200M). Specify a larger value with -heap if you have more RAM.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Language C detected and set for analysis (CPAMain.detectFrontendLanguageIfNecessary, INFO)

Using the following resource limits: CPU-time limit of 10s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker 2.1.1 / combinations-bdd+va (OpenJDK 64-Bit Server VM 17.0.9) started (CPAchecker.run, INFO)

Parsing CFA from file(s) "/home/pom/CS-Work/Year-4/Practical-Programming-Analysis-COMP0174/Courseworks/Coursework_1/repos/XERXES/xerxes.c" (CPAchecker.parse, INFO)

Using Restarting Algorithm (CoreComponentsFactory.createAlgorithm, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Loading analysis 1 from file ./config/components/bddAnalysisRestricted.properties ... (RestartAlgorithm.run, INFO)

Using the following resource limits: CPU-time limit of 10s (Analysis ./config/components/bddAnalysisRestricted.properties:ResourceLimitChecker.fromConfiguration, INFO)

Starting analysis 1 ... (RestartAlgorithm.run, INFO)

Analysis 1 terminated, but result is unsound. (RestartAlgorithm.run, INFO)

Statistics for algorithm 1 of 2
===============================
Total time for algorithm 1:     0.426s

BDDCPA statistics
-----------------
Number of boolean vars:           0 (of 9)
Number of intEqual vars:          0 (of 4)
Number of intAdd vars:            0 (of 3)
Number of all vars:               0
Number of intBool partitions:     9
Number of intEq partitions:       4
Number of intAdd partitions:      2
Number of all partitions:         44
Number of named predicates:          6528
Number of BDD nodes:                               17230
Size of BDD node table:                            18874379
Size of BDD node cleanup queue:                    0.00 (sum: 0, count: 6529, min: 0, max: 0)
Time for BDD node cleanup:                             0.002s
Time for BDD garbage collection:                       0.000s (in 0 runs)

AutomatonAnalysis (AssertionAutomaton) statistics
-------------------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.000s
Automaton transfers with branching:                0
Automaton transfer successors:                     0.00 (sum: 0, count: 0, min: 0, max: 0) []
Number of states with assumption transitions:      0

AutomatonAnalysis (ErrorLabelAutomaton) statistics
--------------------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.000s
Automaton transfers with branching:                0
Automaton transfer successors:                     0.00 (sum: 0, count: 0, min: 0, max: 0) []
Number of states with assumption transitions:      0

AutomatonAnalysis (TerminatingFunctions) statistics
---------------------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.000s
Automaton transfers with branching:                0
Automaton transfer successors:                     0.00 (sum: 0, count: 0, min: 0, max: 0) []
Number of states with assumption transitions:      0

RestartAlgorithm switches to the next configuration... (RestartAlgorithm.run, INFO)

Loading analysis 2 from file ./config/valueAnalysis.properties ... (RestartAlgorithm.run, INFO)

Mismatch of configuration options when loading from './config/valueAnalysis.properties': 'limits.time.cpu' has two values '10' and '900s'. Using '900s'. (NestingAlgorithm.checkConfigs, INFO)

Using the following resource limits: CPU-time limit of 900s (Analysis ./config/valueAnalysis.properties:ResourceLimitChecker.fromConfiguration, INFO)

Starting analysis 2 ... (RestartAlgorithm.run, INFO)

Stopping analysis ... (CPAchecker.runAlgorithm, INFO)

Verification result: TRUE. No property violation found by chosen configuration.
More details about the verification run can be found in the directory "./output".
Graphical representation included in the file "./output/Report.html".
combinationsValueCegar60+predCmc
Running CPAchecker with default heap size (1200M). Specify a larger value with -heap if you have more RAM.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Language C detected and set for analysis (CPAMain.detectFrontendLanguageIfNecessary, INFO)

Using the following resource limits: CPU-time limit of 10s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker 2.1.1 / combinations-valueCegar60+pred-cmc (OpenJDK 64-Bit Server VM 17.0.9) started (CPAchecker.run, INFO)

Parsing CFA from file(s) "/home/pom/CS-Work/Year-4/Practical-Programming-Analysis-COMP0174/Courseworks/Coursework_1/repos/XERXES/xerxes.c" (CPAchecker.parse, INFO)

Using Restarting Algorithm (CoreComponentsFactory.createAlgorithm, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Loading analysis 1 from file ./config/components/valueAnalysis-Cegar-60s-generate-cmc-condition.properties ... (RestartAlgorithm.run, INFO)

Mismatch of configuration options when loading from './config/components/valueAnalysis-Cegar-60s-generate-cmc-condition.properties': 'limits.time.cpu' has two values '10' and '60s'. Using '60s'. (NestingAlgorithm.checkConfigs, INFO)

Using the following resource limits: CPU-time limit of 60s (Analysis ./config/components/valueAnalysis-Cegar-60s-generate-cmc-condition.properties:ResourceLimitChecker.fromConfiguration, INFO)

Starting analysis 1 ... (RestartAlgorithm.run, INFO)

Stopping analysis ... (CPAchecker.runAlgorithm, INFO)

Verification result: TRUE. No property violation found by chosen configuration.
More details about the verification run can be found in the directory "./output".
Graphical representation included in the file "./output/Report.html".
combinationsValueCegar+pred
Running CPAchecker with default heap size (1200M). Specify a larger value with -heap if you have more RAM.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Language C detected and set for analysis (CPAMain.detectFrontendLanguageIfNecessary, INFO)

Using the following resource limits: CPU-time limit of 10s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker 2.1.1 / combinations-valueCegar+pred (OpenJDK 64-Bit Server VM 17.0.9) started (CPAchecker.run, INFO)

Parsing CFA from file(s) "/home/pom/CS-Work/Year-4/Practical-Programming-Analysis-COMP0174/Courseworks/Coursework_1/repos/XERXES/xerxes.c" (CPAchecker.parse, INFO)

Using Restarting Algorithm (CoreComponentsFactory.createAlgorithm, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Loading analysis 1 from file ./config/components/valueAnalysis-combinations.properties ... (RestartAlgorithm.run, INFO)

Mismatch of configuration options when loading from './config/components/valueAnalysis-combinations.properties': 'limits.time.cpu' has two values '10' and '100s'. Using '100s'. (NestingAlgorithm.checkConfigs, INFO)

Using the following resource limits: CPU-time limit of 100s (Analysis ./config/components/valueAnalysis-combinations.properties:ResourceLimitChecker.fromConfiguration, INFO)

Starting analysis 1 ... (RestartAlgorithm.run, INFO)

Stopping analysis ... (CPAchecker.runAlgorithm, INFO)

Verification result: TRUE. No property violation found by chosen configuration.
More details about the verification run can be found in the directory "./output".
Graphical representation included in the file "./output/Report.html".
correctnessWitnessesKInduction
Running CPAchecker with default heap size (1200M). Specify a larger value with -heap if you have more RAM.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Language C detected and set for analysis (CPAMain.detectFrontendLanguageIfNecessary, INFO)

Using the following resource limits: CPU-time limit of 10s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker 2.1.1 / correctness-witnesses-k-induction (OpenJDK 64-Bit Server VM 17.0.9) started (CPAchecker.run, INFO)

Parsing CFA from file(s) "/home/pom/CS-Work/Year-4/Practical-Programming-Analysis-COMP0174/Courseworks/Coursework_1/repos/XERXES/xerxes.c" (CPAchecker.parse, INFO)

Using the following resource limits: CPU-time limit of 10s (Parallel analysis 1:ResourceLimitChecker.fromConfiguration, INFO)

Using predicate analysis with MathSAT5 version 5.6.6 (218275631c24) (Apr 23 2021 08:35:29, gmp 6.1.2, gcc 7.5.0, 64-bit, reentrant). (Parallel analysis 1:PredicateCPA:PredicateCPA.<init>, INFO)

Using predicate analysis with MathSAT5 version 5.6.6 (218275631c24) (Apr 23 2021 08:35:29, gmp 6.1.2, gcc 7.5.0, 64-bit, reentrant). (Parallel analysis 1:InductionStepCase:PredicateCPA:PredicateCPA.<init>, INFO)

Using the following resource limits: CPU-time limit of 10s (Parallel analysis 2:ResourceLimitChecker.fromConfiguration, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

./config/components/kInduction/correctnessWitnesses-kInduction.properties finished successfully. (ParallelAlgorithm.handleFutureResults, INFO)

Analysis was terminated (Parallel analysis 2:ParallelAlgorithm.runParallelAnalysis, INFO)

Stopping analysis ... (CPAchecker.runAlgorithm, INFO)

Verification result: TRUE. No property violation found by chosen configuration.
More details about the verification run can be found in the directory "./output".
Graphical representation included in the file "./output/Report.html".
correctnessWitnessValidationAcsl
Running CPAchecker with default heap size (1200M). Specify a larger value with -heap if you have more RAM.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Language C detected and set for analysis (CPAMain.detectFrontendLanguageIfNecessary, INFO)

Using the following resource limits: CPU-time limit of 10s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker 2.1.1 / correctness-witness-validation-acsl (OpenJDK 64-Bit Server VM 17.0.9) started (CPAchecker.run, INFO)

Parsing CFA from file(s) "/home/pom/CS-Work/Year-4/Practical-Programming-Analysis-COMP0174/Courseworks/Coursework_1/repos/XERXES/xerxes.c" (CPAchecker.parse, INFO)

Using predicate analysis with MathSAT5 version 5.6.6 (218275631c24) (Apr 23 2021 08:35:29, gmp 6.1.2, gcc 7.5.0, 64-bit, reentrant). (PredicateCPA:PredicateCPA.<init>, INFO)

Using predicate analysis with MathSAT5 version 5.6.6 (218275631c24) (Apr 23 2021 08:35:29, gmp 6.1.2, gcc 7.5.0, 64-bit, reentrant). (InductionStepCase:PredicateCPA:PredicateCPA.<init>, INFO)

Using the following resource limits: CPU-time limit of 10s (KInductionInvariantGenerator:ResourceLimitChecker.fromConfiguration, INFO)

Using predicate analysis with MathSAT5 version 5.6.6 (218275631c24) (Apr 23 2021 08:35:29, gmp 6.1.2, gcc 7.5.0, 64-bit, reentrant). (KInductionInvariantGenerator:PredicateCPA:PredicateCPA.<init>, INFO)

Using predicate analysis with MathSAT5 version 5.6.6 (218275631c24) (Apr 23 2021 08:35:29, gmp 6.1.2, gcc 7.5.0, 64-bit, reentrant). (KInductionInvariantGenerator:InductionStepCase:PredicateCPA:PredicateCPA.<init>, INFO)

The following configuration options were specified but are not used:
 cpa.automaton.breakOnTargetState
 termination.violation.witness
 counterexample.checker.config
 counterexample.checker 
 (CPAchecker.printConfigurationWarnings, WARNING)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Stopping analysis ... (CPAchecker.runAlgorithm, INFO)

Verification result: TRUE. No property violation found by chosen configuration.
More details about the verification run can be found in the directory "./output".
correctnessWitnessValidation
Running CPAchecker with default heap size (1200M). Specify a larger value with -heap if you have more RAM.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Language C detected and set for analysis (CPAMain.detectFrontendLanguageIfNecessary, INFO)

Using the following resource limits: CPU-time limit of 10s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker 2.1.1 / correctness-witness-validation (OpenJDK 64-Bit Server VM 17.0.9) started (CPAchecker.run, INFO)

Parsing CFA from file(s) "/home/pom/CS-Work/Year-4/Practical-Programming-Analysis-COMP0174/Courseworks/Coursework_1/repos/XERXES/xerxes.c" (CPAchecker.parse, INFO)

Using predicate analysis with MathSAT5 version 5.6.6 (218275631c24) (Apr 23 2021 08:35:29, gmp 6.1.2, gcc 7.5.0, 64-bit, reentrant). (PredicateCPA:PredicateCPA.<init>, INFO)

Using predicate analysis with MathSAT5 version 5.6.6 (218275631c24) (Apr 23 2021 08:35:29, gmp 6.1.2, gcc 7.5.0, 64-bit, reentrant). (InductionStepCase:PredicateCPA:PredicateCPA.<init>, INFO)

Using the following resource limits: CPU-time limit of 10s (KInductionInvariantGenerator:ResourceLimitChecker.fromConfiguration, INFO)

Using predicate analysis with MathSAT5 version 5.6.6 (218275631c24) (Apr 23 2021 08:35:29, gmp 6.1.2, gcc 7.5.0, 64-bit, reentrant). (KInductionInvariantGenerator:PredicateCPA:PredicateCPA.<init>, INFO)

Using predicate analysis with MathSAT5 version 5.6.6 (218275631c24) (Apr 23 2021 08:35:29, gmp 6.1.2, gcc 7.5.0, 64-bit, reentrant). (KInductionInvariantGenerator:InductionStepCase:PredicateCPA:PredicateCPA.<init>, INFO)

The following configuration options were specified but are not used:
 cpa.automaton.breakOnTargetState 
 (CPAchecker.printConfigurationWarnings, WARNING)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Stopping analysis ... (CPAchecker.runAlgorithm, INFO)

Verification result: TRUE. No property violation found by chosen configuration.
More details about the verification run can be found in the directory "./output".
default
Running CPAchecker with default heap size (1200M). Specify a larger value with -heap if you have more RAM.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Language C detected and set for analysis (CPAMain.detectFrontendLanguageIfNecessary, INFO)

Using the following resource limits: CPU-time limit of 10s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker 2.1.1 / default (OpenJDK 64-Bit Server VM 17.0.9) started (CPAchecker.run, INFO)

Parsing CFA from file(s) "/home/pom/CS-Work/Year-4/Practical-Programming-Analysis-COMP0174/Courseworks/Coursework_1/repos/XERXES/xerxes.c" (CPAchecker.parse, INFO)

Using Restarting Algorithm (CoreComponentsFactory.createAlgorithm, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Loading analysis 1 from file config/components/kInduction+Invariants/kInduction.properties ... (RestartAlgorithm.run, INFO)

Using the following resource limits: CPU-time limit of 10s (Analysis config/components/kInduction+Invariants/kInduction.properties:ResourceLimitChecker.fromConfiguration, INFO)

Using the following resource limits: CPU-time limit of 10s (Analysis config/components/kInduction+Invariants/kInduction.properties:Parallel analysis 1:ResourceLimitChecker.fromConfiguration, INFO)

Using predicate analysis with MathSAT5 version 5.6.6 (218275631c24) (Apr 23 2021 08:35:29, gmp 6.1.2, gcc 7.5.0, 64-bit, reentrant). (Analysis config/components/kInduction+Invariants/kInduction.properties:Parallel analysis 1:PredicateCPA:PredicateCPA.<init>, INFO)

Using predicate analysis with MathSAT5 version 5.6.6 (218275631c24) (Apr 23 2021 08:35:29, gmp 6.1.2, gcc 7.5.0, 64-bit, reentrant). (Analysis config/components/kInduction+Invariants/kInduction.properties:Parallel analysis 1:InductionStepCase:PredicateCPA:PredicateCPA.<init>, INFO)

Using the following resource limits: CPU-time limit of 10s (Analysis config/components/kInduction+Invariants/kInduction.properties:Parallel analysis 2:ResourceLimitChecker.fromConfiguration, INFO)

Starting analysis 1 ... (RestartAlgorithm.run, INFO)

config/components/kInduction+Invariants/../kInduction/kInduction.properties finished successfully. (Analysis config/components/kInduction+Invariants/kInduction.properties:ParallelAlgorithm.handleFutureResults, INFO)

Initializing reached set took too long, analysis cannot be started (One of the parallel analyses has finished successfully, cancelling all other runs.) (Analysis config/components/kInduction+Invariants/kInduction.properties:Parallel analysis 2:ShutdownNotifier.shutdownIfNecessary, INFO)

Stopping analysis ... (CPAchecker.runAlgorithm, INFO)

Verification result: TRUE. No property violation found by chosen configuration.
More details about the verification run can be found in the directory "./output".
Graphical representation included in the file "./output/Report.html".
defuse
Running CPAchecker with default heap size (1200M). Specify a larger value with -heap if you have more RAM.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Language C detected and set for analysis (CPAMain.detectFrontendLanguageIfNecessary, INFO)

Using the following resource limits: CPU-time limit of 10s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker 2.1.1 / defuse (OpenJDK 64-Bit Server VM 17.0.9) started (CPAchecker.run, INFO)

Parsing CFA from file(s) "/home/pom/CS-Work/Year-4/Practical-Programming-Analysis-COMP0174/Courseworks/Coursework_1/repos/XERXES/xerxes.c" (CPAchecker.parse, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Stopping analysis ... (CPAchecker.runAlgorithm, INFO)

Verification result: TRUE. No property violation found by chosen configuration.
More details about the verification run can be found in the directory "./output".
Graphical representation included in the file "./output/Report.html".
detectRecursion
Running CPAchecker with default heap size (1200M). Specify a larger value with -heap if you have more RAM.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Language C detected and set for analysis (CPAMain.detectFrontendLanguageIfNecessary, INFO)

Using the following resource limits: CPU-time limit of 10s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker 2.1.1 / detectRecursion (OpenJDK 64-Bit Server VM 17.0.9) started (CPAchecker.run, INFO)

Parsing CFA from file(s) "/home/pom/CS-Work/Year-4/Practical-Programming-Analysis-COMP0174/Courseworks/Coursework_1/repos/XERXES/xerxes.c" (CPAchecker.parse, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Stopping analysis ... (CPAchecker.runAlgorithm, INFO)

Verification result: TRUE. No property violation found by chosen configuration.
More details about the verification run can be found in the directory "./output".
Graphical representation included in the file "./output/Report.html".
deterministicVariables
Running CPAchecker with default heap size (1200M). Specify a larger value with -heap if you have more RAM.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Language C detected and set for analysis (CPAMain.detectFrontendLanguageIfNecessary, INFO)

Using the following resource limits: CPU-time limit of 10s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker 2.1.1 / deterministicVariables (OpenJDK 64-Bit Server VM 17.0.9) started (CPAchecker.run, INFO)

Parsing CFA from file(s) "/home/pom/CS-Work/Year-4/Practical-Programming-Analysis-COMP0174/Courseworks/Coursework_1/repos/XERXES/xerxes.c" (CPAchecker.parse, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Stopping analysis ... (CPAchecker.runAlgorithm, INFO)

Verification result: TRUE. No property violation found by chosen configuration.
More details about the verification run can be found in the directory "./output".
Graphical representation included in the file "./output/Report.html".
differenceUsagePredicateAnalysis
Running CPAchecker with default heap size (1200M). Specify a larger value with -heap if you have more RAM.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Language C detected and set for analysis (CPAMain.detectFrontendLanguageIfNecessary, INFO)

Using the following resource limits: CPU-time limit of 10s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker 2.1.1 / differenceUsagePredicateAnalysis (OpenJDK 64-Bit Server VM 17.0.9) started (CPAchecker.run, INFO)

Parsing CFA from file(s) "/home/pom/CS-Work/Year-4/Practical-Programming-Analysis-COMP0174/Courseworks/Coursework_1/repos/XERXES/xerxes.c" (CPAchecker.parse, INFO)

Using Restarting Algorithm (CoreComponentsFactory.createAlgorithm, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Loading analysis 1 from file config/components/differenceUsageAutomatonGeneratorAsComponent.properties ... (RestartAlgorithm.run, INFO)

Using the following resource limits: CPU-time limit of 10s (Analysis config/components/differenceUsageAutomatonGeneratorAsComponent.properties:ResourceLimitChecker.fromConfiguration, INFO)

Warning: Skipping one analysis because the configuration file config/components/differenceUsageAutomatonGeneratorAsComponent.properties is invalid (Required configuration option differential.program is missing.) (ModificationsRcdCPA.<init>, WARNING)

Loading analysis 1 from file config/components/predicateAnalysis-use-cmc-condition-differential.properties ... (RestartAlgorithm.run, INFO)

Mismatch of configuration options when loading from 'config/components/predicateAnalysis-use-cmc-condition-differential.properties': 'limits.time.cpu' has two values '10' and '900s'. Using '900s'. (NestingAlgorithm.checkConfigs, INFO)

Using the following resource limits: CPU-time limit of 900s (Analysis config/components/predicateAnalysis-use-cmc-condition-differential.properties:ResourceLimitChecker.fromConfiguration, INFO)

Using predicate analysis with MathSAT5 version 5.6.6 (218275631c24) (Apr 23 2021 08:35:29, gmp 6.1.2, gcc 7.5.0, 64-bit, reentrant) and JFactory 1.21. (Analysis config/components/predicateAnalysis-use-cmc-condition-differential.properties:PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (Analysis config/components/predicateAnalysis-use-cmc-condition-differential.properties:PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis 1 ... (RestartAlgorithm.run, INFO)

Stopping analysis ... (CPAchecker.runAlgorithm, INFO)

Verification result: TRUE. No property violation found by chosen configuration.
More details about the verification run can be found in the directory "./output".
Graphical representation included in the file "./output/Report.html".
differentialPredicateAnalysis
Running CPAchecker with default heap size (1200M). Specify a larger value with -heap if you have more RAM.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Language C detected and set for analysis (CPAMain.detectFrontendLanguageIfNecessary, INFO)

Using the following resource limits: CPU-time limit of 10s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker 2.1.1 / differentialPredicateAnalysis (OpenJDK 64-Bit Server VM 17.0.9) started (CPAchecker.run, INFO)

Parsing CFA from file(s) "/home/pom/CS-Work/Year-4/Practical-Programming-Analysis-COMP0174/Courseworks/Coursework_1/repos/XERXES/xerxes.c" (CPAchecker.parse, INFO)

Using Restarting Algorithm (CoreComponentsFactory.createAlgorithm, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Loading analysis 1 from file config/components/differentialAutomatonGeneratorAsComponent.properties ... (RestartAlgorithm.run, INFO)

Using the following resource limits: CPU-time limit of 10s (Analysis config/components/differentialAutomatonGeneratorAsComponent.properties:ResourceLimitChecker.fromConfiguration, INFO)

Warning: Skipping one analysis because the configuration file config/components/differentialAutomatonGeneratorAsComponent.properties is invalid (Required configuration option differential.program is missing.) (ModificationsCPA.<init>, WARNING)

Loading analysis 1 from file config/components/predicateAnalysis-use-cmc-condition-differential.properties ... (RestartAlgorithm.run, INFO)

Mismatch of configuration options when loading from 'config/components/predicateAnalysis-use-cmc-condition-differential.properties': 'limits.time.cpu' has two values '10' and '900s'. Using '900s'. (NestingAlgorithm.checkConfigs, INFO)

Using the following resource limits: CPU-time limit of 900s (Analysis config/components/predicateAnalysis-use-cmc-condition-differential.properties:ResourceLimitChecker.fromConfiguration, INFO)

Using predicate analysis with MathSAT5 version 5.6.6 (218275631c24) (Apr 23 2021 08:35:29, gmp 6.1.2, gcc 7.5.0, 64-bit, reentrant) and JFactory 1.21. (Analysis config/components/predicateAnalysis-use-cmc-condition-differential.properties:PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (Analysis config/components/predicateAnalysis-use-cmc-condition-differential.properties:PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis 1 ... (RestartAlgorithm.run, INFO)

Stopping analysis ... (CPAchecker.runAlgorithm, INFO)

Verification result: TRUE. No property violation found by chosen configuration.
More details about the verification run can be found in the directory "./output".
Graphical representation included in the file "./output/Report.html".
intervalAnalysisBam
Running CPAchecker with default heap size (1200M). Specify a larger value with -heap if you have more RAM.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Language C detected and set for analysis (CPAMain.detectFrontendLanguageIfNecessary, INFO)

Using the following resource limits: CPU-time limit of 10s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker 2.1.1 / intervalAnalysis-bam (OpenJDK 64-Bit Server VM 17.0.9) started (CPAchecker.run, INFO)

Parsing CFA from file(s) "/home/pom/CS-Work/Year-4/Practical-Programming-Analysis-COMP0174/Courseworks/Coursework_1/repos/XERXES/xerxes.c" (CPAchecker.parse, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Stopping analysis ... (CPAchecker.runAlgorithm, INFO)

Verification result: TRUE. No property violation found by chosen configuration.
More details about the verification run can be found in the directory "./output".
Graphical representation included in the file "./output/Report.html".
intervalAnalysisBamRec
Running CPAchecker with default heap size (1200M). Specify a larger value with -heap if you have more RAM.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Language C detected and set for analysis (CPAMain.detectFrontendLanguageIfNecessary, INFO)

Using the following resource limits: CPU-time limit of 10s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker 2.1.1 / intervalAnalysis-bam-rec (OpenJDK 64-Bit Server VM 17.0.9) started (CPAchecker.run, INFO)

Parsing CFA from file(s) "/home/pom/CS-Work/Year-4/Practical-Programming-Analysis-COMP0174/Courseworks/Coursework_1/repos/XERXES/xerxes.c" (CPAchecker.parse, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

fixpoint was not reached, starting new iteration 1 (BAMCPA:BAMTransferRelationWithFixPointForRecursion.doFixpointIterationForRecursion, INFO)

fixpoint-iteration aborted, because we did not get new states (fixpoint reached). (BAMCPA:BAMTransferRelationWithFixPointForRecursion.doFixpointIterationForRecursion, INFO)

Stopping analysis ... (CPAchecker.runAlgorithm, INFO)

Verification result: TRUE. No property violation found by chosen configuration.
More details about the verification run can be found in the directory "./output".
Graphical representation included in the file "./output/Report.html".
intervalAnalysisJoin
Running CPAchecker with default heap size (1200M). Specify a larger value with -heap if you have more RAM.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Language C detected and set for analysis (CPAMain.detectFrontendLanguageIfNecessary, INFO)

Using the following resource limits: CPU-time limit of 10s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker 2.1.1 / intervalAnalysis-join (OpenJDK 64-Bit Server VM 17.0.9) started (CPAchecker.run, INFO)

Parsing CFA from file(s) "/home/pom/CS-Work/Year-4/Practical-Programming-Analysis-COMP0174/Courseworks/Coursework_1/repos/XERXES/xerxes.c" (CPAchecker.parse, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Stopping analysis ... (CPAchecker.runAlgorithm, INFO)

Verification result: TRUE. No property violation found by chosen configuration.
More details about the verification run can be found in the directory "./output".
Graphical representation included in the file "./output/Report.html".
intervalAnalysisParallelBam
Running CPAchecker with default heap size (1200M). Specify a larger value with -heap if you have more RAM.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Language C detected and set for analysis (CPAMain.detectFrontendLanguageIfNecessary, INFO)

Using the following resource limits: CPU-time limit of 10s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker 2.1.1 / intervalAnalysis-parallelBam (OpenJDK 64-Bit Server VM 17.0.9) started (CPAchecker.run, INFO)

Parsing CFA from file(s) "/home/pom/CS-Work/Year-4/Practical-Programming-Analysis-COMP0174/Courseworks/Coursework_1/repos/XERXES/xerxes.c" (CPAchecker.parse, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

creating pool for 20 threads (ParallelBAMAlgorithm.run0, INFO)

Stopping analysis ... (CPAchecker.runAlgorithm, INFO)

Verification result: TRUE. No property violation found by chosen configuration.
More details about the verification run can be found in the directory "./output".
Graphical representation included in the file "./output/Report.html".
kInductionDfInvariants
Running CPAchecker with default heap size (1200M). Specify a larger value with -heap if you have more RAM.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Language C detected and set for analysis (CPAMain.detectFrontendLanguageIfNecessary, INFO)

Using the following resource limits: CPU-time limit of 10s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker 2.1.1 / kInduction-dfInvariants (OpenJDK 64-Bit Server VM 17.0.9) started (CPAchecker.run, INFO)

Parsing CFA from file(s) "/home/pom/CS-Work/Year-4/Practical-Programming-Analysis-COMP0174/Courseworks/Coursework_1/repos/XERXES/xerxes.c" (CPAchecker.parse, INFO)

Using the following resource limits: CPU-time limit of 10s (Parallel analysis 1:ResourceLimitChecker.fromConfiguration, INFO)

Using predicate analysis with MathSAT5 version 5.6.6 (218275631c24) (Apr 23 2021 08:35:29, gmp 6.1.2, gcc 7.5.0, 64-bit, reentrant). (Parallel analysis 1:PredicateCPA:PredicateCPA.<init>, INFO)

Using predicate analysis with MathSAT5 version 5.6.6 (218275631c24) (Apr 23 2021 08:35:29, gmp 6.1.2, gcc 7.5.0, 64-bit, reentrant). (Parallel analysis 1:InductionStepCase:PredicateCPA:PredicateCPA.<init>, INFO)

Using the following resource limits: CPU-time limit of 10s (Parallel analysis 2:ResourceLimitChecker.fromConfiguration, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

./config/components/kInduction+Invariants/../kInduction/kInduction.properties finished successfully. (ParallelAlgorithm.handleFutureResults, INFO)

Finding target locations was interrupted. Defaulting to select all locations as potential target locations. (Parallel analysis 2:InvariantsCPA:TargetLocationProvider:TargetLocationProviderImpl.tryGetAutomatonTargetLocations, WARNING)

Initializing reached set took too long, analysis cannot be started (One of the parallel analyses has finished successfully, cancelling all other runs.) (Parallel analysis 2:ShutdownNotifier.shutdownIfNecessary, INFO)

Stopping analysis ... (CPAchecker.runAlgorithm, INFO)

Verification result: TRUE. No property violation found by chosen configuration.
More details about the verification run can be found in the directory "./output".
Graphical representation included in the file "./output/Report.html".
kInductionKidfInvariants
Running CPAchecker with default heap size (1200M). Specify a larger value with -heap if you have more RAM.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Language C detected and set for analysis (CPAMain.detectFrontendLanguageIfNecessary, INFO)

Using the following resource limits: CPU-time limit of 10s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker 2.1.1 / kInduction-kidfInvariants (OpenJDK 64-Bit Server VM 17.0.9) started (CPAchecker.run, INFO)

Parsing CFA from file(s) "/home/pom/CS-Work/Year-4/Practical-Programming-Analysis-COMP0174/Courseworks/Coursework_1/repos/XERXES/xerxes.c" (CPAchecker.parse, INFO)

Using the following resource limits: CPU-time limit of 10s (Parallel analysis 1:ResourceLimitChecker.fromConfiguration, INFO)

Using predicate analysis with MathSAT5 version 5.6.6 (218275631c24) (Apr 23 2021 08:35:29, gmp 6.1.2, gcc 7.5.0, 64-bit, reentrant). (Parallel analysis 1:PredicateCPA:PredicateCPA.<init>, INFO)

Using predicate analysis with MathSAT5 version 5.6.6 (218275631c24) (Apr 23 2021 08:35:29, gmp 6.1.2, gcc 7.5.0, 64-bit, reentrant). (Parallel analysis 1:InductionStepCase:PredicateCPA:PredicateCPA.<init>, INFO)

Using the following resource limits: CPU-time limit of 10s (Parallel analysis 1:KInductionInvariantGenerator:ResourceLimitChecker.fromConfiguration, INFO)

Using predicate analysis with MathSAT5 version 5.6.6 (218275631c24) (Apr 23 2021 08:35:29, gmp 6.1.2, gcc 7.5.0, 64-bit, reentrant). (Parallel analysis 1:KInductionInvariantGenerator:PredicateCPA:PredicateCPA.<init>, INFO)

Using predicate analysis with MathSAT5 version 5.6.6 (218275631c24) (Apr 23 2021 08:35:29, gmp 6.1.2, gcc 7.5.0, 64-bit, reentrant). (Parallel analysis 1:KInductionInvariantGenerator:InductionStepCase:PredicateCPA:PredicateCPA.<init>, INFO)

Using the following resource limits: CPU-time limit of 10s (Parallel analysis 2:ResourceLimitChecker.fromConfiguration, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Creating formula for program (Parallel analysis 1:KInductionInvariantGenerator:AbstractBMCAlgorithm.run, INFO)

./config/components/kInduction+Invariants/../kInduction/kInduction-kiInvariants.properties finished successfully. (ParallelAlgorithm.handleFutureResults, INFO)

Analysis was terminated (Parallel analysis 2:ParallelAlgorithm.runParallelAnalysis, INFO)

Stopping analysis ... (CPAchecker.runAlgorithm, INFO)

Verification result: TRUE. No property violation found by chosen configuration.
More details about the verification run can be found in the directory "./output".
Graphical representation included in the file "./output/Report.html".
kInductionKipdrdfInvariants
Running CPAchecker with default heap size (1200M). Specify a larger value with -heap if you have more RAM.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Language C detected and set for analysis (CPAMain.detectFrontendLanguageIfNecessary, INFO)

Using the following resource limits: CPU-time limit of 10s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker 2.1.1 / kInduction-kipdrdfInvariants (OpenJDK 64-Bit Server VM 17.0.9) started (CPAchecker.run, INFO)

Parsing CFA from file(s) "/home/pom/CS-Work/Year-4/Practical-Programming-Analysis-COMP0174/Courseworks/Coursework_1/repos/XERXES/xerxes.c" (CPAchecker.parse, INFO)

Using the following resource limits: CPU-time limit of 10s (Parallel analysis 1:ResourceLimitChecker.fromConfiguration, INFO)

Using predicate analysis with MathSAT5 version 5.6.6 (218275631c24) (Apr 23 2021 08:35:29, gmp 6.1.2, gcc 7.5.0, 64-bit, reentrant). (Parallel analysis 1:PredicateCPA:PredicateCPA.<init>, INFO)

Using predicate analysis with MathSAT5 version 5.6.6 (218275631c24) (Apr 23 2021 08:35:29, gmp 6.1.2, gcc 7.5.0, 64-bit, reentrant). (Parallel analysis 1:InductionStepCase:PredicateCPA:PredicateCPA.<init>, INFO)

Using the following resource limits: CPU-time limit of 10s (Parallel analysis 1:KInductionInvariantGenerator:ResourceLimitChecker.fromConfiguration, INFO)

Using predicate analysis with MathSAT5 version 5.6.6 (218275631c24) (Apr 23 2021 08:35:29, gmp 6.1.2, gcc 7.5.0, 64-bit, reentrant). (Parallel analysis 1:KInductionInvariantGenerator:PredicateCPA:PredicateCPA.<init>, INFO)

Using predicate analysis with MathSAT5 version 5.6.6 (218275631c24) (Apr 23 2021 08:35:29, gmp 6.1.2, gcc 7.5.0, 64-bit, reentrant). (Parallel analysis 1:KInductionInvariantGenerator:InductionStepCase:PredicateCPA:PredicateCPA.<init>, INFO)

Using the following resource limits: CPU-time limit of 10s (Parallel analysis 2:ResourceLimitChecker.fromConfiguration, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

./config/components/kInduction+Invariants/../kInduction/kInduction-kipdr-lateInvariants.properties finished successfully. (ParallelAlgorithm.handleFutureResults, INFO)

Analysis was terminated (Parallel analysis 2:ParallelAlgorithm.runParallelAnalysis, INFO)

Stopping analysis ... (CPAchecker.runAlgorithm, INFO)

Verification result: TRUE. No property violation found by chosen configuration.
More details about the verification run can be found in the directory "./output".
Graphical representation included in the file "./output/Report.html".
kInductionKipdrInvariants
Running CPAchecker with default heap size (1200M). Specify a larger value with -heap if you have more RAM.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Language C detected and set for analysis (CPAMain.detectFrontendLanguageIfNecessary, INFO)

Using the following resource limits: CPU-time limit of 10s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker 2.1.1 / kInduction-kipdrInvariants (OpenJDK 64-Bit Server VM 17.0.9) started (CPAchecker.run, INFO)

Parsing CFA from file(s) "/home/pom/CS-Work/Year-4/Practical-Programming-Analysis-COMP0174/Courseworks/Coursework_1/repos/XERXES/xerxes.c" (CPAchecker.parse, INFO)

Using predicate analysis with MathSAT5 version 5.6.6 (218275631c24) (Apr 23 2021 08:35:29, gmp 6.1.2, gcc 7.5.0, 64-bit, reentrant). (PredicateCPA:PredicateCPA.<init>, INFO)

Using predicate analysis with MathSAT5 version 5.6.6 (218275631c24) (Apr 23 2021 08:35:29, gmp 6.1.2, gcc 7.5.0, 64-bit, reentrant). (InductionStepCase:PredicateCPA:PredicateCPA.<init>, INFO)

Using the following resource limits: CPU-time limit of 10s (KInductionInvariantGenerator:ResourceLimitChecker.fromConfiguration, INFO)

Using predicate analysis with MathSAT5 version 5.6.6 (218275631c24) (Apr 23 2021 08:35:29, gmp 6.1.2, gcc 7.5.0, 64-bit, reentrant). (KInductionInvariantGenerator:PredicateCPA:PredicateCPA.<init>, INFO)

Using predicate analysis with MathSAT5 version 5.6.6 (218275631c24) (Apr 23 2021 08:35:29, gmp 6.1.2, gcc 7.5.0, 64-bit, reentrant). (KInductionInvariantGenerator:InductionStepCase:PredicateCPA:PredicateCPA.<init>, INFO)

The following configuration options were specified but are not used:
 cpa.automaton.breakOnTargetState 
 (CPAchecker.printConfigurationWarnings, WARNING)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Creating formula for program (KInductionInvariantGenerator:AbstractBMCAlgorithm.run, INFO)

Stopping analysis ... (CPAchecker.runAlgorithm, INFO)

Verification result: TRUE. No property violation found by chosen configuration.
More details about the verification run can be found in the directory "./output".
Graphical representation included in the file "./output/Report.html".
kInductionLinearDfInvariants
Running CPAchecker with default heap size (1200M). Specify a larger value with -heap if you have more RAM.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Language C detected and set for analysis (CPAMain.detectFrontendLanguageIfNecessary, INFO)

Using the following resource limits: CPU-time limit of 10s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker 2.1.1 / kInduction-linear-dfInvariants (OpenJDK 64-Bit Server VM 17.0.9) started (CPAchecker.run, INFO)

Parsing CFA from file(s) "/home/pom/CS-Work/Year-4/Practical-Programming-Analysis-COMP0174/Courseworks/Coursework_1/repos/XERXES/xerxes.c" (CPAchecker.parse, INFO)

Using the following resource limits: CPU-time limit of 10s (Parallel analysis 1:ResourceLimitChecker.fromConfiguration, INFO)

Using unsound approximation of ints with unbounded integers and floats with rationals for encoding program semantics. (Parallel analysis 1:PredicateCPA:FormulaManagerView.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.6.6 (218275631c24) (Apr 23 2021 08:35:29, gmp 6.1.2, gcc 7.5.0, 64-bit, reentrant). (Parallel analysis 1:PredicateCPA:PredicateCPA.<init>, INFO)

Using unsound approximation of ints with unbounded integers and floats with rationals for encoding program semantics. (Parallel analysis 1:AssumptionStorageCPA:FormulaManagerView.<init>, WARNING)

Using unsound approximation of ints with unbounded integers and floats with rationals for encoding program semantics. (Parallel analysis 1:InductionStepCase:PredicateCPA:FormulaManagerView.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.6.6 (218275631c24) (Apr 23 2021 08:35:29, gmp 6.1.2, gcc 7.5.0, 64-bit, reentrant). (Parallel analysis 1:InductionStepCase:PredicateCPA:PredicateCPA.<init>, INFO)

Using unsound approximation of ints with unbounded integers and floats with rationals for encoding program semantics. (Parallel analysis 1:InductionStepCase:AssumptionStorageCPA:FormulaManagerView.<init>, WARNING)

Using the following resource limits: CPU-time limit of 10s (Parallel analysis 2:ResourceLimitChecker.fromConfiguration, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

./config/components/kInduction+Invariants/../kInduction/kInduction-linear.properties finished successfully. (ParallelAlgorithm.handleFutureResults, INFO)

Analysis was terminated (Parallel analysis 2:ParallelAlgorithm.runParallelAnalysis, INFO)

Stopping analysis ... (CPAchecker.runAlgorithm, INFO)

Verification result: TRUE. No property violation found by chosen configuration.
More details about the verification run can be found in the directory "./output".
Graphical representation included in the file "./output/Report.html".
kInductionLinearKidfInvariants
Running CPAchecker with default heap size (1200M). Specify a larger value with -heap if you have more RAM.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Language C detected and set for analysis (CPAMain.detectFrontendLanguageIfNecessary, INFO)

Using the following resource limits: CPU-time limit of 10s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker 2.1.1 / kInduction-linear-kidfInvariants (OpenJDK 64-Bit Server VM 17.0.9) started (CPAchecker.run, INFO)

Parsing CFA from file(s) "/home/pom/CS-Work/Year-4/Practical-Programming-Analysis-COMP0174/Courseworks/Coursework_1/repos/XERXES/xerxes.c" (CPAchecker.parse, INFO)

Using the following resource limits: CPU-time limit of 10s (Parallel analysis 1:ResourceLimitChecker.fromConfiguration, INFO)

Using unsound approximation of ints with unbounded integers and floats with rationals for encoding program semantics. (Parallel analysis 1:PredicateCPA:FormulaManagerView.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.6.6 (218275631c24) (Apr 23 2021 08:35:29, gmp 6.1.2, gcc 7.5.0, 64-bit, reentrant). (Parallel analysis 1:PredicateCPA:PredicateCPA.<init>, INFO)

Using unsound approximation of ints with unbounded integers and floats with rationals for encoding program semantics. (Parallel analysis 1:AssumptionStorageCPA:FormulaManagerView.<init>, WARNING)

Using unsound approximation of ints with unbounded integers and floats with rationals for encoding program semantics. (Parallel analysis 1:InductionStepCase:PredicateCPA:FormulaManagerView.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.6.6 (218275631c24) (Apr 23 2021 08:35:29, gmp 6.1.2, gcc 7.5.0, 64-bit, reentrant). (Parallel analysis 1:InductionStepCase:PredicateCPA:PredicateCPA.<init>, INFO)

Using unsound approximation of ints with unbounded integers and floats with rationals for encoding program semantics. (Parallel analysis 1:InductionStepCase:AssumptionStorageCPA:FormulaManagerView.<init>, WARNING)

Using the following resource limits: CPU-time limit of 10s (Parallel analysis 1:KInductionInvariantGenerator:ResourceLimitChecker.fromConfiguration, INFO)

Using unsound approximation of ints with unbounded integers and floats with rationals for encoding program semantics. (Parallel analysis 1:KInductionInvariantGenerator:PredicateCPA:FormulaManagerView.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.6.6 (218275631c24) (Apr 23 2021 08:35:29, gmp 6.1.2, gcc 7.5.0, 64-bit, reentrant). (Parallel analysis 1:KInductionInvariantGenerator:PredicateCPA:PredicateCPA.<init>, INFO)

Using unsound approximation of ints with unbounded integers and floats with rationals for encoding program semantics. (Parallel analysis 1:KInductionInvariantGenerator:AssumptionStorageCPA:FormulaManagerView.<init>, WARNING)

Using unsound approximation of ints with unbounded integers and floats with rationals for encoding program semantics. (Parallel analysis 1:KInductionInvariantGenerator:InductionStepCase:PredicateCPA:FormulaManagerView.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.6.6 (218275631c24) (Apr 23 2021 08:35:29, gmp 6.1.2, gcc 7.5.0, 64-bit, reentrant). (Parallel analysis 1:KInductionInvariantGenerator:InductionStepCase:PredicateCPA:PredicateCPA.<init>, INFO)

Using unsound approximation of ints with unbounded integers and floats with rationals for encoding program semantics. (Parallel analysis 1:KInductionInvariantGenerator:InductionStepCase:AssumptionStorageCPA:FormulaManagerView.<init>, WARNING)

Using the following resource limits: CPU-time limit of 10s (Parallel analysis 2:ResourceLimitChecker.fromConfiguration, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Creating formula for program (Parallel analysis 1:KInductionInvariantGenerator:AbstractBMCAlgorithm.run, INFO)

./config/components/kInduction+Invariants/../kInduction/kInduction-linear-kiInvariants.properties finished successfully. (ParallelAlgorithm.handleFutureResults, INFO)

Initializing reached set took too long, analysis cannot be started (One of the parallel analyses has finished successfully, cancelling all other runs.) (Parallel analysis 2:ShutdownNotifier.shutdownIfNecessary, INFO)

Stopping analysis ... (CPAchecker.runAlgorithm, INFO)

Verification result: TRUE. No property violation found by chosen configuration.
More details about the verification run can be found in the directory "./output".
Graphical representation included in the file "./output/Report.html".
kInductionLinear
Running CPAchecker with default heap size (1200M). Specify a larger value with -heap if you have more RAM.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Language C detected and set for analysis (CPAMain.detectFrontendLanguageIfNecessary, INFO)

Using the following resource limits: CPU-time limit of 10s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker 2.1.1 / kInduction-linear (OpenJDK 64-Bit Server VM 17.0.9) started (CPAchecker.run, INFO)

Parsing CFA from file(s) "/home/pom/CS-Work/Year-4/Practical-Programming-Analysis-COMP0174/Courseworks/Coursework_1/repos/XERXES/xerxes.c" (CPAchecker.parse, INFO)

Using the following resource limits: CPU-time limit of 10s (Parallel analysis 1:ResourceLimitChecker.fromConfiguration, INFO)

Using unsound approximation of ints with unbounded integers and floats with rationals for encoding program semantics. (Parallel analysis 1:PredicateCPA:FormulaManagerView.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.6.6 (218275631c24) (Apr 23 2021 08:35:29, gmp 6.1.2, gcc 7.5.0, 64-bit, reentrant). (Parallel analysis 1:PredicateCPA:PredicateCPA.<init>, INFO)

Using unsound approximation of ints with unbounded integers and floats with rationals for encoding program semantics. (Parallel analysis 1:AssumptionStorageCPA:FormulaManagerView.<init>, WARNING)

Using unsound approximation of ints with unbounded integers and floats with rationals for encoding program semantics. (Parallel analysis 1:InductionStepCase:PredicateCPA:FormulaManagerView.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.6.6 (218275631c24) (Apr 23 2021 08:35:29, gmp 6.1.2, gcc 7.5.0, 64-bit, reentrant). (Parallel analysis 1:InductionStepCase:PredicateCPA:PredicateCPA.<init>, INFO)

Using unsound approximation of ints with unbounded integers and floats with rationals for encoding program semantics. (Parallel analysis 1:InductionStepCase:AssumptionStorageCPA:FormulaManagerView.<init>, WARNING)

Using the following resource limits: CPU-time limit of 10s (Parallel analysis 1:KInductionInvariantGenerator:ResourceLimitChecker.fromConfiguration, INFO)

Using unsound approximation of ints with unbounded integers and floats with rationals for encoding program semantics. (Parallel analysis 1:KInductionInvariantGenerator:PredicateCPA:FormulaManagerView.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.6.6 (218275631c24) (Apr 23 2021 08:35:29, gmp 6.1.2, gcc 7.5.0, 64-bit, reentrant). (Parallel analysis 1:KInductionInvariantGenerator:PredicateCPA:PredicateCPA.<init>, INFO)

Using unsound approximation of ints with unbounded integers and floats with rationals for encoding program semantics. (Parallel analysis 1:KInductionInvariantGenerator:AssumptionStorageCPA:FormulaManagerView.<init>, WARNING)

Using unsound approximation of ints with unbounded integers and floats with rationals for encoding program semantics. (Parallel analysis 1:KInductionInvariantGenerator:InductionStepCase:PredicateCPA:FormulaManagerView.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.6.6 (218275631c24) (Apr 23 2021 08:35:29, gmp 6.1.2, gcc 7.5.0, 64-bit, reentrant). (Parallel analysis 1:KInductionInvariantGenerator:InductionStepCase:PredicateCPA:PredicateCPA.<init>, INFO)

Using unsound approximation of ints with unbounded integers and floats with rationals for encoding program semantics. (Parallel analysis 1:KInductionInvariantGenerator:InductionStepCase:AssumptionStorageCPA:FormulaManagerView.<init>, WARNING)

Using the following resource limits: CPU-time limit of 10s (Parallel analysis 2:ResourceLimitChecker.fromConfiguration, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Creating formula for program (Parallel analysis 1:KInductionInvariantGenerator:AbstractBMCAlgorithm.run, INFO)

./config/components/kInduction+Invariants/../kInduction/kInduction-linear-kiInvariants.properties finished successfully. (ParallelAlgorithm.handleFutureResults, INFO)

Analysis was terminated (Parallel analysis 2:ParallelAlgorithm.runParallelAnalysis, INFO)

Stopping analysis ... (CPAchecker.runAlgorithm, INFO)

Verification result: TRUE. No property violation found by chosen configuration.
More details about the verification run can be found in the directory "./output".
Graphical representation included in the file "./output/Report.html".
kInduction
Running CPAchecker with default heap size (1200M). Specify a larger value with -heap if you have more RAM.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Language C detected and set for analysis (CPAMain.detectFrontendLanguageIfNecessary, INFO)

Using the following resource limits: CPU-time limit of 10s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker 2.1.1 / kInduction (OpenJDK 64-Bit Server VM 17.0.9) started (CPAchecker.run, INFO)

Parsing CFA from file(s) "/home/pom/CS-Work/Year-4/Practical-Programming-Analysis-COMP0174/Courseworks/Coursework_1/repos/XERXES/xerxes.c" (CPAchecker.parse, INFO)

Using the following resource limits: CPU-time limit of 10s (Parallel analysis 1:ResourceLimitChecker.fromConfiguration, INFO)

Using predicate analysis with MathSAT5 version 5.6.6 (218275631c24) (Apr 23 2021 08:35:29, gmp 6.1.2, gcc 7.5.0, 64-bit, reentrant). (Parallel analysis 1:PredicateCPA:PredicateCPA.<init>, INFO)

Using predicate analysis with MathSAT5 version 5.6.6 (218275631c24) (Apr 23 2021 08:35:29, gmp 6.1.2, gcc 7.5.0, 64-bit, reentrant). (Parallel analysis 1:InductionStepCase:PredicateCPA:PredicateCPA.<init>, INFO)

Using the following resource limits: CPU-time limit of 10s (Parallel analysis 2:ResourceLimitChecker.fromConfiguration, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

config/components/kInduction+Invariants/../kInduction/kInduction.properties finished successfully. (ParallelAlgorithm.handleFutureResults, INFO)

Analysis was terminated (Parallel analysis 2:ParallelAlgorithm.runParallelAnalysis, INFO)

Stopping analysis ... (CPAchecker.runAlgorithm, INFO)

Verification result: TRUE. No property violation found by chosen configuration.
More details about the verification run can be found in the directory "./output".
Graphical representation included in the file "./output/Report.html".
liveVariables
Running CPAchecker with default heap size (1200M). Specify a larger value with -heap if you have more RAM.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Language C detected and set for analysis (CPAMain.detectFrontendLanguageIfNecessary, INFO)

Using the following resource limits: CPU-time limit of 10s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker 2.1.1 / liveVariables (OpenJDK 64-Bit Server VM 17.0.9) started (CPAchecker.run, INFO)

Parsing CFA from file(s) "/home/pom/CS-Work/Year-4/Practical-Programming-Analysis-COMP0174/Courseworks/Coursework_1/repos/XERXES/xerxes.c" (CPAchecker.parse, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Stopping analysis ... (CPAchecker.runAlgorithm, INFO)

Verification result: TRUE. No property violation found by chosen configuration.
Exception in thread "main" java.lang.RuntimeException: Could not determine file name based on abstract state!
	at org.sosy_lab.cpachecker.cpa.arg.witnessexport.WitnessExporter.getInitialFileName(WitnessExporter.java:215)
	at org.sosy_lab.cpachecker.cpa.arg.witnessexport.WitnessExporter.generateProofWitness(WitnessExporter.java:176)
	at org.sosy_lab.cpachecker.cpa.arg.ARGStatistics.exportARG0(ARGStatistics.java:378)
	at org.sosy_lab.cpachecker.cpa.arg.ARGStatistics.exportARG(ARGStatistics.java:361)
	at org.sosy_lab.cpachecker.cpa.arg.ARGStatistics.writeOutputFiles(ARGStatistics.java:306)
	at org.sosy_lab.cpachecker.util.statistics.StatisticsUtils.writeOutputFiles(StatisticsUtils.java:94)
	at org.sosy_lab.cpachecker.core.MainCPAStatistics.writeOutputFiles(MainCPAStatistics.java:415)
	at org.sosy_lab.cpachecker.core.CPAcheckerResult.writeOutputFiles(CPAcheckerResult.java:126)
	at org.sosy_lab.cpachecker.cmdline.CPAMain.printResultAndStatistics(CPAMain.java:734)
	at org.sosy_lab.cpachecker.cmdline.CPAMain.main(CPAMain.java:175)
lockatorLinuxLightweight
Running CPAchecker with default heap size (1200M). Specify a larger value with -heap if you have more RAM.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Language C detected and set for analysis (CPAMain.detectFrontendLanguageIfNecessary, INFO)

Using the following resource limits: CPU-time limit of 10s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker 2.1.1 / lockator-linux-lightweight (OpenJDK 64-Bit Server VM 17.0.9) started (CPAchecker.run, INFO)

Parsing CFA from file(s) "/home/pom/CS-Work/Year-4/Practical-Programming-Analysis-COMP0174/Courseworks/Coursework_1/repos/XERXES/xerxes.c" (CPAchecker.parse, INFO)

Using Restarting Algorithm (CoreComponentsFactory.createAlgorithm, INFO)

The following configuration options were specified but are not used:
 cpa.arg.export
 cpa.bam.exportARGs
 counterexample.export.enabled
 cpa.callstack.skipRecursion
 precision.path
 coverage.output 
 (CPAchecker.printConfigurationWarnings, WARNING)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Loading analysis 1 from file ./config/includes/lockator/sharedAnalysis-linux.properties ... (RestartAlgorithm.run, INFO)

Using the following resource limits: CPU-time limit of 10s (Analysis ./config/includes/lockator/sharedAnalysis-linux.properties:ResourceLimitChecker.fromConfiguration, INFO)

Starting analysis 1 ... (RestartAlgorithm.run, INFO)

Statistics for algorithm 1 of 2
===============================
Total time for algorithm 1:     0.227s

LocalCPA statistics
-------------------

CPA algorithm statistics
------------------------
Number of iterations:            1034
Max size of waitlist:            9
Average size of waitlist:        1
Number of computed successors:   1061
Max successors for one state:    2
Number of times merged:          0
Number of times stopped:         28
Number of times breaked:         0

Total time for CPA algorithm:         0.113s (Max:     0.113s)
  Time for choose from waitlist:      0.004s
  Time for precision adjustment:      0.004s
  Time for transfer relation:         0.063s
  Time for merge operator:            0.004s
  Time for stop operator:             0.015s
  Time for adding to reached set:     0.005s

CPA algorithm statistics
------------------------
Number of iterations:            1034
Max size of waitlist:            9
Average size of waitlist:        1
Number of computed successors:   1061
Max successors for one state:    2
Number of times merged:          0
Number of times stopped:         28
Number of times breaked:         0

Total time for CPA algorithm:         0.113s (Max:     0.113s)
  Time for choose from waitlist:      0.004s
  Time for precision adjustment:      0.004s
  Time for transfer relation:         0.063s
  Time for merge operator:            0.004s
  Time for stop operator:             0.015s
  Time for adding to reached set:     0.005s

RestartAlgorithm switches to the next configuration... (RestartAlgorithm.run, INFO)

Loading analysis 2 from file ./config/includes/lockator/lockStatistics-linux-lightweight.properties ... (RestartAlgorithm.run, INFO)

Using the following resource limits: CPU-time limit of 10s (Analysis ./config/includes/lockator/lockStatistics-linux-lightweight.properties:ResourceLimitChecker.fromConfiguration, INFO)

Starting analysis 2 ... (RestartAlgorithm.run, INFO)

Stopping analysis ... (CPAchecker.runAlgorithm, INFO)

Verification result: TRUE. No property violation found by chosen configuration.
More details about the verification run can be found in the directory "./output".
predicateAnalysisBackward
Running CPAchecker with default heap size (1200M). Specify a larger value with -heap if you have more RAM.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Language C detected and set for analysis (CPAMain.detectFrontendLanguageIfNecessary, INFO)

Using the following resource limits: CPU-time limit of 10s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker 2.1.1 / predicateAnalysisBackward (OpenJDK 64-Bit Server VM 17.0.9) started (CPAchecker.run, INFO)

Parsing CFA from file(s) "/home/pom/CS-Work/Year-4/Practical-Programming-Analysis-COMP0174/Courseworks/Coursework_1/repos/XERXES/xerxes.c" (CPAchecker.parse, INFO)

Handling of pointer aliasing is disabled, analysis is unsound if aliased pointers exist. (PredicateCPA:PathFormulaManagerImpl.<init>, WARNING)

Using predicate analysis with MathSAT5 version 5.6.6 (218275631c24) (Apr 23 2021 08:35:29, gmp 6.1.2, gcc 7.5.0, 64-bit, reentrant) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Assuming external function getc to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usleep to be a pure function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function fork to be a constant function. (PredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Stopping analysis ... (CPAchecker.runAlgorithm, INFO)

Verification result: TRUE. No property violation found by chosen configuration.
Exception in thread "main" java.lang.RuntimeException: Could not determine file name based on abstract state!
	at org.sosy_lab.cpachecker.cpa.arg.witnessexport.WitnessExporter.getInitialFileName(WitnessExporter.java:215)
	at org.sosy_lab.cpachecker.cpa.arg.witnessexport.WitnessExporter.generateProofWitness(WitnessExporter.java:176)
	at org.sosy_lab.cpachecker.cpa.arg.ARGStatistics.exportARG0(ARGStatistics.java:378)
	at org.sosy_lab.cpachecker.cpa.arg.ARGStatistics.exportARG(ARGStatistics.java:361)
	at org.sosy_lab.cpachecker.cpa.arg.ARGStatistics.writeOutputFiles(ARGStatistics.java:306)
	at org.sosy_lab.cpachecker.util.statistics.StatisticsUtils.writeOutputFiles(StatisticsUtils.java:94)
	at org.sosy_lab.cpachecker.core.MainCPAStatistics.writeOutputFiles(MainCPAStatistics.java:415)
	at org.sosy_lab.cpachecker.core.CPAcheckerResult.writeOutputFiles(CPAcheckerResult.java:126)
	at org.sosy_lab.cpachecker.cmdline.CPAMain.printResultAndStatistics(CPAMain.java:734)
	at org.sosy_lab.cpachecker.cmdline.CPAMain.main(CPAMain.java:175)
predicateAnalysisSlabDBE
Running CPAchecker with default heap size (1200M). Specify a larger value with -heap if you have more RAM.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Language C detected and set for analysis (CPAMain.detectFrontendLanguageIfNecessary, INFO)

Using the following resource limits: CPU-time limit of 10s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker 2.1.1 / predicateAnalysis-Slab-DBE (OpenJDK 64-Bit Server VM 17.0.9) started (CPAchecker.run, INFO)

Parsing CFA from file(s) "/home/pom/CS-Work/Year-4/Practical-Programming-Analysis-COMP0174/Courseworks/Coursework_1/repos/XERXES/xerxes.c" (CPAchecker.parse, INFO)

Using predicate analysis with MathSAT5 version 5.6.6 (218275631c24) (Apr 23 2021 08:35:29, gmp 6.1.2, gcc 7.5.0, 64-bit, reentrant). (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with SlicingAbstractionsStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Stopping analysis ... (CPAchecker.runAlgorithm, INFO)

Verification result: TRUE. No property violation found by chosen configuration.
More details about the verification run can be found in the directory "./output".
Exception in thread "main" java.lang.IllegalArgumentException: expected one element but was: <N1, N2, N3, N4, N7, ...>
	at com.google.common.collect.Iterators.getOnlyElement(Iterators.java:323)
	at com.google.common.collect.Iterables.getOnlyElement(Iterables.java:263)
	at org.sosy_lab.cpachecker.cpa.arg.witnessexport.GraphBuilder$3.buildGraph(GraphBuilder.java:250)
	at org.sosy_lab.cpachecker.cpa.arg.witnessexport.WitnessFactory.produceWitness(WitnessFactory.java:1188)
	at org.sosy_lab.cpachecker.cpa.arg.witnessexport.WitnessExporter.generateProofWitness(WitnessExporter.java:188)
	at org.sosy_lab.cpachecker.core.counterexample.ReportGenerator.extractWitness(ReportGenerator.java:238)
	at org.sosy_lab.cpachecker.core.counterexample.ReportGenerator.generate(ReportGenerator.java:179)
	at org.sosy_lab.cpachecker.cmdline.CPAMain.printResultAndStatistics(CPAMain.java:750)
	at org.sosy_lab.cpachecker.cmdline.CPAMain.main(CPAMain.java:175)
predicateAnalysisSlabSBE
Running CPAchecker with default heap size (1200M). Specify a larger value with -heap if you have more RAM.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Language C detected and set for analysis (CPAMain.detectFrontendLanguageIfNecessary, INFO)

Using the following resource limits: CPU-time limit of 10s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker 2.1.1 / predicateAnalysis-Slab-SBE (OpenJDK 64-Bit Server VM 17.0.9) started (CPAchecker.run, INFO)

Parsing CFA from file(s) "/home/pom/CS-Work/Year-4/Practical-Programming-Analysis-COMP0174/Courseworks/Coursework_1/repos/XERXES/xerxes.c" (CPAchecker.parse, INFO)

Using predicate analysis with MathSAT5 version 5.6.6 (218275631c24) (Apr 23 2021 08:35:29, gmp 6.1.2, gcc 7.5.0, 64-bit, reentrant). (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with SlicingAbstractionsStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Stopping analysis ... (CPAchecker.runAlgorithm, INFO)

Verification result: TRUE. No property violation found by chosen configuration.
More details about the verification run can be found in the directory "./output".
Exception in thread "main" java.lang.IllegalArgumentException: expected one element but was: <N1, N2, N3, N4, N7, ...>
	at com.google.common.collect.Iterators.getOnlyElement(Iterators.java:323)
	at com.google.common.collect.Iterables.getOnlyElement(Iterables.java:263)
	at org.sosy_lab.cpachecker.cpa.arg.witnessexport.GraphBuilder$3.buildGraph(GraphBuilder.java:250)
	at org.sosy_lab.cpachecker.cpa.arg.witnessexport.WitnessFactory.produceWitness(WitnessFactory.java:1188)
	at org.sosy_lab.cpachecker.cpa.arg.witnessexport.WitnessExporter.generateProofWitness(WitnessExporter.java:188)
	at org.sosy_lab.cpachecker.core.counterexample.ReportGenerator.extractWitness(ReportGenerator.java:238)
	at org.sosy_lab.cpachecker.core.counterexample.ReportGenerator.generate(ReportGenerator.java:179)
	at org.sosy_lab.cpachecker.cmdline.CPAMain.printResultAndStatistics(CPAMain.java:750)
	at org.sosy_lab.cpachecker.cmdline.CPAMain.main(CPAMain.java:175)
predicateAnalysisSlicingIncremental
Running CPAchecker with default heap size (1200M). Specify a larger value with -heap if you have more RAM.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Language C detected and set for analysis (CPAMain.detectFrontendLanguageIfNecessary, INFO)

Using the following resource limits: CPU-time limit of 10s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker 2.1.1 / predicateAnalysis-slicing-incremental (OpenJDK 64-Bit Server VM 17.0.9) started (CPAchecker.run, INFO)

Parsing CFA from file(s) "/home/pom/CS-Work/Year-4/Practical-Programming-Analysis-COMP0174/Courseworks/Coursework_1/repos/XERXES/xerxes.c" (CPAchecker.parse, INFO)

Using predicate analysis with MathSAT5 version 5.6.6 (218275631c24) (Apr 23 2021 08:35:29, gmp 6.1.2, gcc 7.5.0, 64-bit, reentrant) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Stopping analysis ... (CPAchecker.runAlgorithm, INFO)

Verification result: TRUE. No property violation found by chosen configuration.
More details about the verification run can be found in the directory "./output".
Graphical representation included in the file "./output/Report.html".
predicateAnalysisSlicing
Running CPAchecker with default heap size (1200M). Specify a larger value with -heap if you have more RAM.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Language C detected and set for analysis (CPAMain.detectFrontendLanguageIfNecessary, INFO)

Using the following resource limits: CPU-time limit of 10s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker 2.1.1 / predicateAnalysis-slicing (OpenJDK 64-Bit Server VM 17.0.9) started (CPAchecker.run, INFO)

Parsing CFA from file(s) "/home/pom/CS-Work/Year-4/Practical-Programming-Analysis-COMP0174/Courseworks/Coursework_1/repos/XERXES/xerxes.c" (CPAchecker.parse, INFO)

Using predicate analysis with MathSAT5 version 5.6.6 (218275631c24) (Apr 23 2021 08:35:29, gmp 6.1.2, gcc 7.5.0, 64-bit, reentrant) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Stopping analysis ... (CPAchecker.runAlgorithm, INFO)

Verification result: TRUE. No property violation found by chosen configuration.
More details about the verification run can be found in the directory "./output".
Graphical representation included in the file "./output/Report.html".
svcomp21BamBnb
Running CPAchecker with default heap size (1200M). Specify a larger value with -heap if you have more RAM.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Language C detected and set for analysis (CPAMain.detectFrontendLanguageIfNecessary, INFO)

Using the following resource limits: CPU-time limit of 10s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker 2.1.1 / svcomp21-bam-bnb (OpenJDK 64-Bit Server VM 17.0.9) started (CPAchecker.run, INFO)

Parsing CFA from file(s) "/home/pom/CS-Work/Year-4/Practical-Programming-Analysis-COMP0174/Courseworks/Coursework_1/repos/XERXES/xerxes.c" (CPAchecker.parse, INFO)

Using unsound approximation of ints with unbounded integers and floats with rationals for encoding program semantics. (BAMPredicateCPA:FormulaManagerView.<init>, WARNING)

Using predicate analysis with SMTInterpol 2.5-842-gfcd46532 and JFactory 1.21. (BAMPredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with BAMPredicateAbstractionRefinementStrategy strategy. (BAMPredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Program contains calls to unsupported function memset, result may be wrong. (BAMPredicateCPA:CtoFormulaConverter.isUnsupportedFunction, WARNING)

Assuming external function memset to be a pure function. (BAMPredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function getaddrinfo to be a pure function. (BAMPredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function gai_strerror to be a pure function. (BAMPredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function socket to be a pure function. (BAMPredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function connect to be a pure function. (BAMPredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function freeaddrinfo to be a pure function. (BAMPredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function close to be a pure function. (BAMPredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function write to be a pure function. (BAMPredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usleep to be a pure function. (BAMPredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function getc to be a pure function. (BAMPredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function fork to be a constant function. (BAMPredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function signal to be a pure function. (BAMPredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Stopping analysis ... (CPAchecker.runAlgorithm, INFO)

Verification result: TRUE. No property violation found by chosen configuration.
More details about the verification run can be found in the directory "./output".
svcomp22BamSmg
Running CPAchecker with default heap size (1200M). Specify a larger value with -heap if you have more RAM.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Language C detected and set for analysis (CPAMain.detectFrontendLanguageIfNecessary, INFO)

Using the following resource limits: CPU-time limit of 10s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker 2.1.1 / svcomp22-bam-smg (OpenJDK 64-Bit Server VM 17.0.9) started (CPAchecker.run, INFO)

Parsing CFA from file(s) "/home/pom/CS-Work/Year-4/Practical-Programming-Analysis-COMP0174/Courseworks/Coursework_1/repos/XERXES/xerxes.c" (CPAchecker.parse, INFO)

Using unsound approximation of ints with unbounded integers and floats with rationals for encoding program semantics. (BAMPredicateCPA:FormulaManagerView.<init>, WARNING)

Using predicate analysis with SMTInterpol 2.5-842-gfcd46532 and JFactory 1.21. (BAMPredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with BAMPredicateAbstractionRefinementStrategy strategy. (BAMPredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Program contains calls to unsupported function memset, result may be wrong. (BAMPredicateCPA:CtoFormulaConverter.isUnsupportedFunction, WARNING)

Assuming external function memset to be a pure function. (BAMPredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function getaddrinfo to be a pure function. (BAMPredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function gai_strerror to be a pure function. (BAMPredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function socket to be a pure function. (BAMPredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function connect to be a pure function. (BAMPredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function freeaddrinfo to be a pure function. (BAMPredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function close to be a pure function. (BAMPredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function write to be a pure function. (BAMPredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function usleep to be a pure function. (BAMPredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function getc to be a pure function. (BAMPredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function fork to be a constant function. (BAMPredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Assuming external function signal to be a pure function. (BAMPredicateCPA:ExpressionToFormulaVisitor.visit, INFO)

Stopping analysis ... (CPAchecker.runAlgorithm, INFO)

Verification result: TRUE. No property violation found by chosen configuration.
More details about the verification run can be found in the directory "./output".
svcomp22SmgLdv
Running CPAchecker with default heap size (1200M). Specify a larger value with -heap if you have more RAM.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Language C detected and set for analysis (CPAMain.detectFrontendLanguageIfNecessary, INFO)

Using the following resource limits: CPU-time limit of 10s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker 2.1.1 / svcomp22-smg-ldv (OpenJDK 64-Bit Server VM 17.0.9) started (CPAchecker.run, INFO)

Parsing CFA from file(s) "/home/pom/CS-Work/Year-4/Practical-Programming-Analysis-COMP0174/Courseworks/Coursework_1/repos/XERXES/xerxes.c" (CPAchecker.parse, INFO)

The following configuration options were specified but are not used:
 counterexample.checker.config
 counterexample.checker 
 (CPAchecker.printConfigurationWarnings, WARNING)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Stopping analysis ... (CPAchecker.runAlgorithm, INFO)

Verification result: FALSE. Property violation (valid-deref: invalid pointer dereference in lines 28-37) found by chosen configuration.
More details about the verification run can be found in the directory "./output".
symbolicExecutionCegarNoCexCheck
Running CPAchecker with default heap size (1200M). Specify a larger value with -heap if you have more RAM.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Language C detected and set for analysis (CPAMain.detectFrontendLanguageIfNecessary, INFO)

Using the following resource limits: CPU-time limit of 10s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker 2.1.1 / symbolicExecution-Cegar-no-cex-check (OpenJDK 64-Bit Server VM 17.0.9) started (CPAchecker.run, INFO)

Parsing CFA from file(s) "/home/pom/CS-Work/Year-4/Practical-Programming-Analysis-COMP0174/Courseworks/Coursework_1/repos/XERXES/xerxes.c" (CPAchecker.parse, INFO)

The following configuration options were specified but are not used:
 counterexample.checker.config
 counterexample.checker 
 (CPAchecker.printConfigurationWarnings, WARNING)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Stopping analysis ... (CPAchecker.runAlgorithm, INFO)

Verification result: TRUE. No property violation found by chosen configuration.
More details about the verification run can be found in the directory "./output".
Graphical representation included in the file "./output/Report.html".
symbolicExecutionCegar
Running CPAchecker with default heap size (1200M). Specify a larger value with -heap if you have more RAM.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Language C detected and set for analysis (CPAMain.detectFrontendLanguageIfNecessary, INFO)

Using the following resource limits: CPU-time limit of 10s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker 2.1.1 / symbolicExecution-Cegar (OpenJDK 64-Bit Server VM 17.0.9) started (CPAchecker.run, INFO)

Parsing CFA from file(s) "/home/pom/CS-Work/Year-4/Practical-Programming-Analysis-COMP0174/Courseworks/Coursework_1/repos/XERXES/xerxes.c" (CPAchecker.parse, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Stopping analysis ... (CPAchecker.runAlgorithm, INFO)

Verification result: TRUE. No property violation found by chosen configuration.
More details about the verification run can be found in the directory "./output".
Graphical representation included in the file "./output/Report.html".
symbolicExecutionCegarSlicingIncremental
Running CPAchecker with default heap size (1200M). Specify a larger value with -heap if you have more RAM.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Language C detected and set for analysis (CPAMain.detectFrontendLanguageIfNecessary, INFO)

Using the following resource limits: CPU-time limit of 10s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker 2.1.1 / symbolicExecution-Cegar-slicing-incremental (OpenJDK 64-Bit Server VM 17.0.9) started (CPAchecker.run, INFO)

Parsing CFA from file(s) "/home/pom/CS-Work/Year-4/Practical-Programming-Analysis-COMP0174/Courseworks/Coursework_1/repos/XERXES/xerxes.c" (CPAchecker.parse, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Stopping analysis ... (CPAchecker.runAlgorithm, INFO)

Verification result: TRUE. No property violation found by chosen configuration.
More details about the verification run can be found in the directory "./output".
Graphical representation included in the file "./output/Report.html".
symbolicExecutionCegarSlicing
Running CPAchecker with default heap size (1200M). Specify a larger value with -heap if you have more RAM.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Language C detected and set for analysis (CPAMain.detectFrontendLanguageIfNecessary, INFO)

Using the following resource limits: CPU-time limit of 10s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker 2.1.1 / symbolicExecution-Cegar-slicing (OpenJDK 64-Bit Server VM 17.0.9) started (CPAchecker.run, INFO)

Parsing CFA from file(s) "/home/pom/CS-Work/Year-4/Practical-Programming-Analysis-COMP0174/Courseworks/Coursework_1/repos/XERXES/xerxes.c" (CPAchecker.parse, INFO)

The following configuration options were specified but are not used:
 counterexample.export.allowImpreciseCounterexamples 
 (CPAchecker.printConfigurationWarnings, WARNING)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Stopping analysis ... (CPAchecker.runAlgorithm, INFO)

Verification result: TRUE. No property violation found by chosen configuration.
More details about the verification run can be found in the directory "./output".
Graphical representation included in the file "./output/Report.html".
symbolicExecutionNoCegarSlicingIncremental
Running CPAchecker with default heap size (1200M). Specify a larger value with -heap if you have more RAM.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Language C detected and set for analysis (CPAMain.detectFrontendLanguageIfNecessary, INFO)

Using the following resource limits: CPU-time limit of 10s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker 2.1.1 / symbolicExecution-NoCegar-slicing-incremental (OpenJDK 64-Bit Server VM 17.0.9) started (CPAchecker.run, INFO)

Parsing CFA from file(s) "/home/pom/CS-Work/Year-4/Practical-Programming-Analysis-COMP0174/Courseworks/Coursework_1/repos/XERXES/xerxes.c" (CPAchecker.parse, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Stopping analysis ... (CPAchecker.runAlgorithm, INFO)

Verification result: TRUE. No property violation found by chosen configuration.
More details about the verification run can be found in the directory "./output".
Graphical representation included in the file "./output/Report.html".
symbolicExecutionNoCegarSlicing
Running CPAchecker with default heap size (1200M). Specify a larger value with -heap if you have more RAM.
Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Language C detected and set for analysis (CPAMain.detectFrontendLanguageIfNecessary, INFO)

Using the following resource limits: CPU-time limit of 10s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker 2.1.1 / symbolicExecution-NoCegar-slicing (OpenJDK 64-Bit Server VM 17.0.9) started (CPAchecker.run, INFO)

Parsing CFA from file(s) "/home/pom/CS-Work/Year-4/Practical-Programming-Analysis-COMP0174/Courseworks/Coursework_1/repos/XERXES/xerxes.c" (CPAchecker.parse, INFO)

The following configuration options were specified but are not used:
 counterexample.export.allowImpreciseCounterexamples 
 (CPAchecker.printConfigurationWarnings, WARNING)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

Stopping analysis ... (CPAchecker.runAlgorithm, INFO)

Verification result: TRUE. No property violation found by chosen configuration.
More details about the verification run can be found in the directory "./output".
Graphical representation included in the file "./output/Report.html".
All .properties files processed successfully.
